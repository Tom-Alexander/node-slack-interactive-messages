{"version":3,"sources":["../src/express-middleware.js"],"names":["createExpressMiddleware","errorCodes","NO_BODY_PARSER","TOKEN_VERIFICATION_FAILURE","debug","adapter","poweredBy","sendResponse","res","_sendResponse","status","content","Promise","resolve","reject","set","json","end","on","statusCode","_headers","slackMessageAdapterMiddleware","req","next","method","path","respond","body","error","Error","code","ssl_check","payload","JSON","parse","token","verificationToken","dispatch","catch"],"mappings":";;;;;;QAUgBA,uB,GAAAA,uB;;AAVhB;;;;AACA;;;;AAEO,IAAMC,kCAAa;AACxBC,kBAAgB,uCADQ;AAExBC,8BAA4B;AAFJ,CAAnB;;AAKP,IAAMC,QAAQ,qBAAa,gDAAb,CAAd;;AAEO,SAASJ,uBAAT,CAAiCK,OAAjC,EAA0C;AAC/C,MAAMC,YAAY,8BAAlB;;AAEA;AACA,WAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,WAAO,SAASC,aAAT,OAA4C;AAAA,UAAnBC,MAAmB,QAAnBA,MAAmB;AAAA,UAAXC,OAAW,QAAXA,OAAW;;AACjDP,YAAM,4CAAN,EAAoDM,MAApD,EAA4DC,OAA5D;AACA,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCN,YAAIE,MAAJ,CAAWA,MAAX;AACAF,YAAIO,GAAJ,CAAQ,oBAAR,EAA8BT,SAA9B;AACA,YAAIK,OAAJ,EAAa;AACXH,cAAIQ,IAAJ,CAASL,OAAT;AACD,SAFD,MAEO;AACLH,cAAIS,GAAJ;AACD;AACDT,YAAIU,EAAJ,CAAO,QAAP,EAAiB,YAAM;AACrB;AACA;AACA;AACA;AACAd,gBAAM,6CAAN,EAAqDI,IAAIW,UAAzD,EAAqEX,IAAIY,QAAzE;AACAP,kBAAQL,GAAR;AACD,SAPD;AAQAA,YAAIU,EAAJ,CAAO,OAAP,EAAgBJ,MAAhB;AACD,OAjBM,CAAP;AAkBD,KApBD;AAqBD;;AAED,SAAO,SAASO,6BAAT,CAAuCC,GAAvC,EAA4Cd,GAA5C,EAAiDe,IAAjD,EAAuD;AAC5DnB,UAAM,yCAAN,EAAiDkB,IAAIE,MAArD,EAA6DF,IAAIG,IAAjE;;AAEA;AACA;AACA,QAAMC,UAAUnB,aAAaC,GAAb,CAAhB;;AAEA;AACA,QAAI,CAACc,IAAIK,IAAT,EAAe;AACb,UAAMC,QAAQ,IAAIC,KAAJ,CAAU,uDAAV,CAAd;AACAD,YAAME,IAAN,GAAa7B,WAAWC,cAAxB;AACAqB,WAAKK,KAAL;AACA;AACD;;AAED,QAAIN,IAAIK,IAAJ,CAASI,SAAb,EAAwB;AACtBL,cAAQ,EAAEhB,QAAQ,GAAV,EAAR;AACA;AACD;;AAED,QAAMsB,UAAUC,KAAKC,KAAL,CAAWZ,IAAIK,IAAJ,CAASK,OAApB,CAAhB;;AAEA;AACA,QAAI,CAACA,QAAQG,KAAT,IAAkBH,QAAQG,KAAR,KAAkB9B,QAAQ+B,iBAAhD,EAAmE;AACjEhC,YAAM,oCAAN;AACA,UAAMwB,SAAQ,IAAIC,KAAJ,CAAU,+CAAV,CAAd;AACAD,aAAME,IAAN,GAAa7B,WAAWE,0BAAxB;AACAoB,WAAKK,MAAL;AACA;AACD;AACDxB,UAAM,oCAAN;;AAEAsB,YAAQrB,QAAQgC,QAAR,CAAiBL,OAAjB,CAAR,EACGM,KADH,CACSf,IADT;AAED,GAlCD;AAmCD","file":"express-middleware.js","sourcesContent":["import debugFactory from 'debug';\nimport { packageIdentifier } from './util';\n\nexport const errorCodes = {\n  NO_BODY_PARSER: 'SLACKMESSAGEMIDDLEWARE_NO_BODY_PARSER',\n  TOKEN_VERIFICATION_FAILURE: 'SLACKMESSAGEMIDDLEWARE_TOKEN_VERIFICATION_FAILURE',\n};\n\nconst debug = debugFactory('@slack/interactive-messages:express-middleware');\n\nexport function createExpressMiddleware(adapter) {\n  const poweredBy = packageIdentifier();\n\n  // This function binds a specific response instance to a function\n  function sendResponse(res) {\n    return function _sendResponse({ status, content }) {\n      debug('sending response - status: %s, content: %o', status, content);\n      return new Promise((resolve, reject) => {\n        res.status(status);\n        res.set('X-Slack-Powered-By', poweredBy);\n        if (content) {\n          res.json(content);\n        } else {\n          res.end();\n        }\n        res.on('finish', () => {\n          // res._headers is an undocumented property, but we feel comfortable using it because:\n          // 1. express depends on it and express is so foundational in node\n          // 2. this is logging code and the risk of this causing a break is minimal\n          // eslint-disable-next-line no-underscore-dangle\n          debug('response finished - status: %d, headers: %o', res.statusCode, res._headers);\n          resolve(res);\n        });\n        res.on('error', reject);\n      });\n    };\n  }\n\n  return function slackMessageAdapterMiddleware(req, res, next) {\n    debug('request recieved - method: %s, path: %s', req.method, req.path);\n\n    // Bind a response function to this request's respond object. This may be used in a number of\n    // places\n    const respond = sendResponse(res);\n\n    // Check that the request body has been parsed\n    if (!req.body) {\n      const error = new Error('The incoming HTTP request did not have a parsed body.');\n      error.code = errorCodes.NO_BODY_PARSER;\n      next(error);\n      return;\n    }\n\n    if (req.body.ssl_check) {\n      respond({ status: 200 });\n      return;\n    }\n\n    const payload = JSON.parse(req.body.payload);\n\n    // Handle request token verification\n    if (!payload.token || payload.token !== adapter.verificationToken) {\n      debug('request token verification failure');\n      const error = new Error('Slack interactive message verification failed');\n      error.code = errorCodes.TOKEN_VERIFICATION_FAILURE;\n      next(error);\n      return;\n    }\n    debug('request token verification success');\n\n    respond(adapter.dispatch(payload))\n      .catch(next);\n  };\n}\n"]}